package packet

import (
	"bytes"
	"reflect"
	"testing"
)

var data_tests = []struct {
	name string
	p    DataPacket
	b    []byte
	err  error
}{
	{
		name: "Full packet", // with empty CID and SourceName
		p: DataPacket{
			RootLayer: RootLayer{
				PreambleSize:        0x0010,
				PostambleSize:       0x0000,
				ACNPacketIdentifier: packetIdentifierE117,
				RootLength:          0x726E,
				RootVector:          VECTOR_ROOT_E131_DATA,
				CID:                 [16]byte{},
			},
			FrameLength:      0x7258,
			FrameVector:      VECTOR_E131_DATA_PACKET,
			SourceName:       [64]byte{},
			Priority:         100,
			SyncAddress:      0,
			Sequence:         1,
			Options:          0,
			Universe:         1,
			DMPLength:        0x720B,
			DMPVector:        VECTOR_DMP_SET_PROPERTY,
			Format:           0xA1,
			PropertyAddress:  0,
			AddressIncrement: 1,
			Length:           1 + 512,
			Data:             [513]byte{0x00, 0xff, 0xff, 0xff},
		},
		b: []byte{
			0x00, 0x10, 0x00, 0x00, 0x41, 0x53, 0x43, 0x2d, 0x45, 0x31, 0x2e, 0x31, 0x37, 0x00, 0x00, 0x00, 0x72, 0x6e,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x72, 0x58, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x64, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x72, 0x0b, 0x02, 0xa1, 0x00, 0x00, 0x00, 0x01, 0x02, 0x01, 0x00,
			0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		},
		err: nil,
	},
	{
		name: "Small packet", // Packet with not 512 Data bytes
		p: DataPacket{
			RootLayer: RootLayer{
				PreambleSize:        0x0010,
				PostambleSize:       0x0000,
				ACNPacketIdentifier: packetIdentifierE117,
				RootLength:          0x7078,
				RootVector:          VECTOR_ROOT_E131_DATA,
				CID:                 [16]byte{},
			},
			FrameLength:      0x7062,
			FrameVector:      VECTOR_E131_DATA_PACKET,
			SourceName:       [64]byte{},
			Priority:         100,
			SyncAddress:      0,
			Sequence:         1,
			Options:          0,
			Universe:         1,
			DMPLength:        0x7015,
			DMPVector:        VECTOR_DMP_SET_PROPERTY,
			Format:           0xA1,
			PropertyAddress:  0,
			AddressIncrement: 1,
			Length:           1 + 10,
			Data:             [513]byte{0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff},
		},
		b: []byte{
			0x00, 0x10, 0x00, 0x00, 0x41, 0x53, 0x43, 0x2d, 0x45, 0x31, 0x2e, 0x31, 0x37, 0x00, 0x00, 0x00, 0x70, 0x78,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x70, 0x62, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x64, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x70, 0x15, 0x02, 0xa1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00,
			0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
		},
		err: nil,
	},
}

func TestDataPacketUnmarshal(t *testing.T) {
	for _, tt := range data_tests {
		// Test direct unmarshaler
		var p DataPacket
		err := p.UnmarshalBinary(tt.b[:])

		if tt.err != err {
			t.Fatalf("unexpected error on \"%s\":\n- want: %v\n-  got: %v", tt.name, tt.err, err)
		}
		if err != nil {
			return
		}

		if !reflect.DeepEqual(tt.p, p) {
			t.Fatalf("unexpected bytes on \"%s\":\n- want: [%#v]\n-  got: [%#v]", tt.name, tt.p, p)
		}

		// Test global unmarshaler
		d, err := Unmarshal(tt.b[:])
		if tt.err != err {
			t.Fatalf("unexpected error on \"%s\":\n- want: %v\n-  got: %v", tt.name, tt.err, err)
		}
		if d.GetType() != PacketTypeData {
			t.Fatalf("unexpected packet type returned on \"%s\":\n- want: %v\n-  got: %v", tt.name, PacketTypeData, d.GetType())
		}
	}
}

func TestDataPacketMarshal(t *testing.T) {
	for _, tt := range data_tests {
		// Test direct marshaler
		b, err := tt.p.MarshalBinary()

		if tt.err != err {
			t.Fatalf("unexpected error on \"%s\":\n- want: %v\n-  got: %v", tt.name, tt.err, err)
		}
		if err != nil {
			return
		}

		if !bytes.Equal(tt.b[:], b) {
			t.Fatalf("unexpected bytes on \"%s\":\n- want: [%#v] len:%d\n-  got: [%#v] len:%d", tt.name, tt.b, len(tt.b), b, len(b))
		}

		// Test global marshaler
		d, err := Marshal(&tt.p)
		if tt.err != err {
			t.Fatalf("unexpected error on \"%s\":\n- want: %v\n-  got: %v", tt.name, tt.err, err)
		}
		if !bytes.Equal(tt.b[:], d) {
			t.Fatalf("unexpected bytes on \"%s\":\n- want: [%#v] len:%d\n-  got: [%#v] len:%d", tt.name, tt.b, len(tt.b), d, len(d))
		}
	}
}

func TestDataPacketLength(t *testing.T) {
	for _, tt := range data_tests {
		length := tt.p.Length
		packet := NewDataPacket()
		packet.SetData(tt.p.Data[1:length])

		if want, got := tt.p.Length, packet.Length; want != got {
			t.Fatalf("unexpected error on Length \"%s\":\n- want: 0x%x\n-  got: 0x%x", tt.name, want, got)
		}

		if want, got := tt.p.DMPLength, packet.DMPLength; want != got {
			t.Fatalf("unexpected error on DMPLength \"%s\":\n- want: 0x%x\n-  got: 0x%x", tt.name, want, got)
		}

		if want, got := tt.p.FrameLength, packet.FrameLength; want != got {
			t.Fatalf("unexpected error on FrameLength \"%s\":\n- want: 0x%x\n-  got: 0x%x", tt.name, want, got)
		}

		if want, got := tt.p.RootLength, packet.RootLength; want != got {
			t.Fatalf("unexpected error on RootLength \"%s\":\n- want: 0x%x\n-  got: 0x%x", tt.name, want, got)
		}
	}
}

func TestDataPacketOptions(t *testing.T) {
	var p DataPacket

	p.SetForceSynchronisation(true) // bit 5
	if want, got := uint8(0b0010_0000), p.Options; want != got {
		t.Fatalf("unexpected error on Force_Synchronisation bit:\n- want: 0x%x\n-  got: 0x%x", want, got)
	}
	if want, got := true, p.IsForceSynchronisation(); want != got {
		t.Fatalf("unexpected error on Force_Synchronisation bit:\n- want: %v\n-  got: %v", want, got)
	}

	p.SetStreamTerminated(true) // bit 6
	if want, got := uint8(0b0110_0000), p.Options; want != got {
		t.Fatalf("unexpected error on Stream_Terminated bit:\n- want: 0x%x\n-  got: 0x%x", want, got)
	}
	if want, got := true, p.IsStreamTerminated(); want != got {
		t.Fatalf("unexpected error on Stream_Terminated bit:\n- want: %v\n-  got: %v", want, got)
	}

	p.SetPreviewData(true) // bit 7 (MSB)
	if want, got := uint8(0b1110_0000), p.Options; want != got {
		t.Fatalf("unexpected error on Preview_Data bit:\n- want: 0x%x\n-  got: 0x%x", want, got)
	}
	if want, got := true, p.IsPreviewData(); want != got {
		t.Fatalf("unexpected error on Preview_Data bit:\n- want: %v\n-  got: %v", want, got)
	}
}

func TestDataPacketSourceName(t *testing.T) {
	var p DataPacket

	name := "Test Source"
	p.SetSourceName(name)
	if want, got := name, p.GetSourceName(); want != got {
		t.Fatalf("unexpected error on Source Name:\n- want: %v\n-  got: %v", want, got)
	}

	name = "A sACN packet source name with more than 64 characters .........+2"
	err := p.SetSourceName(name)
	if err == nil {
		t.Fatalf("No error returned with source name too long")
	}
}
